---
format: gfm
---

<!-- README.md is generated from README.qmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
set.seed(0)
```

# vecvec <img src="man/figures/logo.svg" align="right" height="139" alt="" />

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
[![R-CMD-check](https://github.com/mitchelloharawild/vecvec/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/mitchelloharawild/vecvec/actions/workflows/R-CMD-check.yaml)
[![CRAN status](https://www.r-pkg.org/badges/version/vecvec)](https://CRAN.R-project.org/package=vecvec)
<!-- badges: end -->

The vecvec package allows you to create vectors of mixed classes. Mixed type vectors are useful for data analysis packages as they allow semantically similar classes (such as time or distributions) to be stored within the same vector and operated upon efficiently with the same functions. It works similarly to `factor()`, in which the values of a vector (analogous to levels of a factor) are stored in the attributes. This also allows for efficient computation when the values are replicated, since operations apply to the unique values of the vector.

## Installation

You can install the development version of vecvec like so:

``` r
remotes::install_github("mitchelloharawild/vecvec")
```

## Example

Use `new_vecvec()` to create a vecvec. Here we combine three vectors of different types.

```{r construction}
library(vecvec)

x <- new_vecvec(as.Date("2025-03-29"), as.POSIXct("2025-01-03 10:05:00"), rnorm(10))
x
```

Internally, the vectors are stored separately in the attributes.

```{r internals}
str(x)
```

Operations apply to all vector types.

```{r arith}
x + 1
```

When subsetting, unused values are dropped.

```{r subset}
x[1]
str(x[1])
```

When a vecvec is replicated, only the indexing is replicated.

```{r replicated}
str(rep(x, each = 10))
str(x[c(1,1,1,3,2,2)])
```

The values in the attribute are unchanged, which allows for efficient computation since operations apply to the attributes (which are not replicated).

```{r efficient}
str(rep(x, each = 10) + 100)
```

If the arguments is differ across replicated indices, the resulting vecvec is [*expanded*](https://github.com/mitchelloharawild/vecvec/issues/2)

```{r expansion}
str(rep(x, each = 10) + 1:120)
```

